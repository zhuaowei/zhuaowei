<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on zhuaowei的博客</title>
    <link>https://zhuaowei.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on zhuaowei的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Nov 2022 21:35:38 +0800</lastBuildDate>
    <atom:link href="https://zhuaowei.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用双端队列求滑动窗口的最大值</title>
      <link>https://zhuaowei.github.io/article/%E4%BD%BF%E7%94%A8%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E6%B1%82%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Fri, 18 Nov 2022 21:35:38 +0800</pubDate>
      <guid>https://zhuaowei.github.io/article/%E4%BD%BF%E7%94%A8%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E6%B1%82%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>&lt;h2 id=&#34;1leetcode-题目&#34;&gt;1、LeetCode 题目&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/sliding-window-maximum/&#34;&gt;滑动窗口最大值&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。&lt;/p&gt;</description>
    </item>
    <item>
      <title>最长回文子串求法Manacher</title>
      <link>https://zhuaowei.github.io/article/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E6%B1%82%E6%B3%95manacher/</link>
      <pubDate>Thu, 17 Nov 2022 17:07:19 +0800</pubDate>
      <guid>https://zhuaowei.github.io/article/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E6%B1%82%E6%B3%95manacher/</guid>
      <description>&lt;h2 id=&#34;1回文子串&#34;&gt;1、回文子串&lt;/h2&gt;&#xA;&lt;p&gt;回文就是正着读和反着读是一样的，例如 &lt;code&gt;abcba&lt;/code&gt; 反过来还是 &lt;code&gt;abcba&lt;/code&gt;，&lt;code&gt;abba&lt;/code&gt; 反过来也是 &lt;code&gt;abba&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;回文子串就是字符串中某段连续的子串是回文，子串必须是连续的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字符串的模式匹配算法 KMP</title>
      <link>https://zhuaowei.github.io/article/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95-kmp/</link>
      <pubDate>Tue, 15 Nov 2022 20:02:06 +0800</pubDate>
      <guid>https://zhuaowei.github.io/article/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95-kmp/</guid>
      <description>&lt;h2 id=&#34;1kmp-简介&#34;&gt;1、KMP 简介&lt;/h2&gt;&#xA;&lt;p&gt;KMP 是1964年发明的字符匹配算法，经过 25 年的证明才将相关的理论证明完成。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;假设要从字符串 str1 中匹配出字符串 str2。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;暴力的字符匹配算法就是将两个字符串的字符从第一个开始一个一个匹配，如果不相等，str1 右移一个位置，而 str2 直接移动到 0，重新开始匹配，时间复杂度为 O(MN)。MN分别是 str2、str1 的长度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>并查集以及感染算法计算岛的数量</title>
      <link>https://zhuaowei.github.io/article/%E5%B9%B6%E6%9F%A5%E9%9B%86%E4%BB%A5%E5%8F%8A%E6%84%9F%E6%9F%93%E7%AE%97%E6%B3%95%E8%AE%A1%E7%AE%97%E5%B2%9B%E7%9A%84%E6%95%B0%E9%87%8F/</link>
      <pubDate>Mon, 14 Nov 2022 18:36:50 +0800</pubDate>
      <guid>https://zhuaowei.github.io/article/%E5%B9%B6%E6%9F%A5%E9%9B%86%E4%BB%A5%E5%8F%8A%E6%84%9F%E6%9F%93%E7%AE%97%E6%B3%95%E8%AE%A1%E7%AE%97%E5%B2%9B%E7%9A%84%E6%95%B0%E9%87%8F/</guid>
      <description>&lt;h2 id=&#34;1并查集&#34;&gt;1、并查集&lt;/h2&gt;&#xA;&lt;p&gt;并查集的结构设计就是都以比较快的速度实现这两个操作：合并两个集合、查询两个元素是否在同一个集合。&lt;/p&gt;&#xA;&lt;p&gt;实现细节：&lt;/p&gt;&#xA;&lt;p&gt;1、元素类：定义元素类，并定义一个构造函数，使并查集可以接收任意类型的集合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>算法复杂度介绍、三种常见排序算法以及二分查找算法</title>
      <link>https://zhuaowei.github.io/article/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%8B%E7%BB%8D%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 14 Nov 2022 15:45:35 +0800</pubDate>
      <guid>https://zhuaowei.github.io/article/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%8B%E7%BB%8D%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;1时间复杂度&#34;&gt;1、时间复杂度&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11操作单元&#34;&gt;1.1、操作单元&lt;/h3&gt;&#xA;&lt;p&gt;程序执行的一个最基本的操作。例如获取数组中第 i 个元素的值，只需计算它的偏移量即可；跳转一次链表，指向下一个单元；执行一次交换操作等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12时间复杂度&#34;&gt;1.2、时间复杂度&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;估算&lt;/strong&gt;的执行程序所需的&lt;strong&gt;执行操作单元的次数&lt;/strong&gt;，以选择排序为例，计算选择排序算法的时间复杂度。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
