<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>四次挥手 on zhuaowei的博客</title>
        <link>https://zhuaowei.github.io/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
        <description>Recent content in 四次挥手 on zhuaowei的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 01 Nov 2022 16:38:24 +0800</lastBuildDate><atom:link href="https://zhuaowei.github.io/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TCP 的三次握手和四次挥手</title>
        <link>https://zhuaowei.github.io/article/tcp-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
        <pubDate>Tue, 01 Nov 2022 16:38:24 +0800</pubDate>
        
        <guid>https://zhuaowei.github.io/article/tcp-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
        <description>&lt;h2 id=&#34;1tcp-的运输连接管理&#34;&gt;1、TCP 的运输连接管理&lt;/h2&gt;
&lt;p&gt;TCP 是面向连接的协议，连接建立和连接释放是每次面向连接通信必不可少的过程。运输连接有三个阶段：连接建立、数据传输和连接释放。TCP 连接建立要解决以下三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要是每一方能够确知对方的存在。&lt;/li&gt;
&lt;li&gt;允许双方协商一些参数。&lt;/li&gt;
&lt;li&gt;能够对运输实体资源进行分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TCP 连接采用客户服务器方式。主动发起连接建立的应用进程叫作&lt;strong&gt;客户（client）&lt;/strong&gt;，而被动等待连接建立的应用进程叫作&lt;strong&gt;服务器（server）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;11tcp-连接的建立三次握手&#34;&gt;1.1、TCP 连接的建立（三次握手）&lt;/h3&gt;
&lt;p&gt;TCP 建立连接的过程叫作握手，握手需要在客户和服务器之间交换三个 TCP 报文段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   A   |                                                     |   B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Client | ---------------- SYN = 1, seq = x ----------------&amp;gt; | Server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       |                                                     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       | &amp;lt;----- SYN = 1, ACK = 1, seq = y, ack = x + 1 ----- |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       |                                                     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       | -------- ACK = 1, seq = x + 1, ack = y + 1 --------&amp;gt;|
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上述过程中，A 主动打开连接，B 被动打开连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、连接建立之前&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;B 的 TCP 服务器进程先创建&lt;strong&gt;传输控制块 TCB&lt;/strong&gt;，准备接受客户进程的连接请求，然后服务器进程就处于 &lt;code&gt;LISTEN&lt;/code&gt; 状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传输控制块 TCB：存储了每一个连接中的重要信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A 的 TCP 客户进程也是首先创建&lt;strong&gt;传输控制模块 TCB&lt;/strong&gt;。然后就可以发送 TCP 连接建立请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、连接建立过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一次握手：A 发送一个连接请求报文 &lt;code&gt;SYN = 1, seq = x&lt;/code&gt;。TCP 规定：SYN 报文段不能携带数据，但是要消耗一个序号。发送完成后，A 进入 &lt;code&gt;SYN-SNET&lt;/code&gt; 状态（同步已发送）。&lt;/p&gt;
&lt;p&gt;第二次握手：B 收到请求报文后，如果同意请求，就发送一个确认报文 &lt;code&gt;SYN = 1, ACK = 1, seq = y, ack = x + 1&lt;/code&gt;。这个报文也属于 SYN 报文，也不能携带数据，确认号 &lt;code&gt;ack = seq + 1&lt;/code&gt;，也要选择一个自己的确认号。发送完确认报文后，B 进入 &lt;code&gt;SYN-RCVD&lt;/code&gt; 状态（同步收到）。&lt;/p&gt;
&lt;p&gt;第三次握手：A 收到 B 的确认报文后，也需要给出确认 &lt;code&gt;ACK = 1, seq = x + 1, ack = y + 1&lt;/code&gt;。ACK 报文可以携带数据，如果不携带数据，则不消耗序号。这时 A 进入&lt;code&gt;ESTABLISHED&lt;/code&gt; 状态（连接确认）。&lt;/p&gt;
&lt;p&gt;B 收到 A 的确认后，也进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B 发送给 A 的确认报文可以分为两次发送，这样就是&lt;strong&gt;四次握手&lt;/strong&gt;，但本质上没有区别。&lt;/p&gt;
&lt;p&gt;两次报文分别是：&lt;code&gt;ACK = 1， ack = x + 1&lt;/code&gt; 和 &lt;code&gt;SYN = 1, seq = y&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3、为何要第三次握手？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设 A 发送了一次连接请求，这个请求不幸丢失了，那么 A 就会再次发送请求，B 收到后给出确认，之后正常进行，没有什么问题。但是，如果 A 的第一次连接在网络中长时间滞流，滞留到 A 的第二次连接已经完成数据传送，并且释放掉了，这时第一次的连接请求才来到 B。如果不采用第三次握手，B 给出确认就建立了连接，但是 A 并没有要建立连接，B 就一直等待数据传送，白白浪费了资源。如果采用第三次握手，A 不会向 B 的第二次连接请求确认发出确认。&lt;/p&gt;
&lt;h3 id=&#34;12tcp-的连接释放四次挥手&#34;&gt;1.2、TCP 的连接释放（四次挥手）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    A   |                                                 |   B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Client | -------------- FIN = 1, seq = u --------------&amp;gt; | Server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        | &amp;lt;------- ACK = 1, seq = v, ack = u + 1 -------- | 立即发送
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        | &amp;lt;--- FIN = 1, ACK = 1, seq = w, ack = u + 1 --- |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        | ------- ACK = 1, seq = u + 1, ack = w + 1 ----&amp;gt; |CLOSED
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在连接释放之前，A、B 都处于连接建立状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、释放连接过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一次挥手&lt;/strong&gt;：A 发送请求释放连接报文 &lt;code&gt;FIN = 1, seq = u&lt;/code&gt;。此时 A 进入 &lt;code&gt;FIN-WAIT-1&lt;/code&gt; 状态（终止等待1），也不再发送数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二次挥手&lt;/strong&gt;：B 收到 A 的连接释放报文段后立即发出确认 &lt;code&gt;ACK = 1, seq = v, ack = u + 1&lt;/code&gt;。报文的序号 v 是前面已传送过数据的最后一个字节的序号加 1。此时 B 进入&lt;code&gt;CLOSE-WAIT&lt;/code&gt; 状态（关闭等待），B 仍然可以向 A 发送数据，TCP 处于**半关闭（half-close）**状态。&lt;/p&gt;
&lt;p&gt;A 收到确认报文后，进入 &lt;code&gt;FIN-WAIT-2&lt;/code&gt; 状态（终止等待2）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三次挥手&lt;/strong&gt;：B 确定没有数据要向 A 发送了，应用进程就通知 TCP 释放连接。这时 B 发出连接释放报文 &lt;code&gt;FIN = 1, ACK = 1, seq = w, ack = u + 1&lt;/code&gt;。报文确认号必须还是上次的 &lt;code&gt;ack = u + 1&lt;/code&gt;，这时 B 进入 &lt;code&gt;LAST-ACK&lt;/code&gt; 状态（最后确认）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四次挥手&lt;/strong&gt;：A 在收到 B 的连接释放报文后，必须对此发出确认 &lt;code&gt;ACK = 1, seq = u + 1, ack = w + 1&lt;/code&gt;。然后进入 &lt;code&gt;TIME-WAIT&lt;/code&gt; 状态（时间等待）。TCP 连接现在还没有释放，必须经过**时间等待计时器（TIME-WAIT timer）**设置的时间 2MSL 后，A 才进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSL（Maximum Segment Lifetime）&lt;/strong&gt;：最长报文段寿命，RFC 793 建议设为 2 分钟。&lt;/p&gt;
&lt;p&gt;所以 A 要经过 4 分钟才能进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态，当 A 撤销相应的传输控制块 TCB 后，就结束了这次的 TCP 连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、为什么 &lt;code&gt;TIME-WAIT&lt;/code&gt; 状态要等待 2MSL？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一，为了保证 A 发送的最后一个 ACK 报文能够到达 B。如果 最后一个 ACK 报文丢了，B 就会重发第三次握手的报文，A 收到报文后再次发送 ACK 报文，并重设 2MSL 计时器。如果不设置这个计时器，A 就无法收到重发的报文，也就不会重发确认报文，B 最终无法正常进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B 一旦收到 A 的确认报文就进入了 &lt;code&gt;CLOSED&lt;/code&gt; 状态，并且撤销相应的传输控制块 TCB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二，防止已失效的报文出现在本连接中。A 发送完最后一个 ACK 报文后，再经过 2MSL 的时间，就可以使本连接中出现的所有报文都从网络中消失。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、保活计时器 keepalive timer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么设置这个计时器呢？防止在连接建立后，客户端突然噶了，服务器就不能收到客户发来的数据，于是白白等待下去。&lt;/p&gt;
&lt;p&gt;服务器每次收到客户发来的数据，就会重置一下保活计时器。保活计时器的时间通常设置为 2 小时，2 小时过后，服务器还是没有收到客户端的数据，就发送一个探测报文，之后每个 75 秒发送一次，一共连发 10 次，10 次之后还是没有回应，就认为客户端噶了，于是关闭这个连接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;等了两个小时，还要每隔 75 秒发送一次消息，还连发 10 次，真的“他温我哭”。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
