<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>树型DP on zhuaowei的博客</title>
    <link>https://zhuaowei.top/tags/%E6%A0%91%E5%9E%8Bdp/</link>
    <description>Recent content in 树型DP on zhuaowei的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 Jan 2024 10:57:32 +0800</lastBuildDate>
    <atom:link href="https://zhuaowei.top/tags/%E6%A0%91%E5%9E%8Bdp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 2322. 从树中删除边的最小分数</title>
      <link>https://zhuaowei.top/article/leetcode-2322.-%E4%BB%8E%E6%A0%91%E4%B8%AD%E5%88%A0%E9%99%A4%E8%BE%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E5%88%86%E6%95%B0/</link>
      <pubDate>Fri, 05 Jan 2024 10:57:32 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-2322.-%E4%BB%8E%E6%A0%91%E4%B8%AD%E5%88%A0%E9%99%A4%E8%BE%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E5%88%86%E6%95%B0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-score-after-removals-on-a-tree/&#34;&gt;LeetCode 2322. 从树中删除边的最小分数&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;遍历整棵树，构建出DFN序和size数组，同时计算出每个子树的异或和。然后遍历任意两条边的组合，求出最小分数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 2458. 移除子树后的二叉树高度</title>
      <link>https://zhuaowei.top/article/leetcode-2458.-%E7%A7%BB%E9%99%A4%E5%AD%90%E6%A0%91%E5%90%8E%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%AB%98%E5%BA%A6/</link>
      <pubDate>Wed, 27 Dec 2023 22:48:35 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-2458.-%E7%A7%BB%E9%99%A4%E5%AD%90%E6%A0%91%E5%90%8E%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%AB%98%E5%BA%A6/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/&#34;&gt;LeetCode 2458. 移除子树后的二叉树高度&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;首先构建出二叉树的 DFN序，记录下每一个节点的树大小和深度。查询时，根据当前节点的DFN序和子树大小，计算出除了当前树区域之外的最大高度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 2246. 相邻字符不同的最长路径</title>
      <link>https://zhuaowei.top/article/leetcode-2246.-%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 27 Dec 2023 22:45:50 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-2246.-%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/longest-path-with-different-adjacent-characters/&#34;&gt;LeetCode 2246. 相邻字符不同的最长路径&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;定义子问题：求子树的相邻字符不同的最长路径。路径分为经过和不经过当前树的头节点两种，分别计算两种路径长度，取最大值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 968. 监控二叉树</title>
      <link>https://zhuaowei.top/article/leetcode-968.-%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 24 Dec 2023 16:08:45 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-968.-%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-tree-cameras/&#34;&gt;LeetCode 968. 监控二叉树&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;要使设置的摄像头数量尽量小，就需要让每个摄像头都尽量覆盖更多的节点，避免重复覆盖。因此可以使用贪心策略，自底向上，尽量使用最少的摄像头。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 437. 路径总和 III</title>
      <link>https://zhuaowei.top/article/leetcode-437.-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-iii/</link>
      <pubDate>Sat, 23 Dec 2023 22:42:50 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-437.-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-iii/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/path-sum-iii/&#34;&gt;LeetCode 437. 路径总和 III&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;记录下二叉树路径的前缀和，每来到一个节点就判断是否存在区间和为目标值。如果存在，就将记录加一。&lt;/p&gt;&#xA;&lt;h3 id=&#34;求解过程&#34;&gt;求解过程&lt;/h3&gt;&#xA;&lt;p&gt;因为求区间和只跟当前节点之前的路径有关，因此可以使用二叉树的前序遍历。&lt;/p&gt;</description>
    </item>
    <item>
      <title>洛谷 P1352 没有上司的舞会</title>
      <link>https://zhuaowei.top/article/%E6%B4%9B%E8%B0%B7-p1352-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</link>
      <pubDate>Sat, 23 Dec 2023 22:22:05 +0800</pubDate>
      <guid>https://zhuaowei.top/article/%E6%B4%9B%E8%B0%B7-p1352-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1352&#34;&gt;洛谷 P1352 没有上司的舞会&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;求子问题：求出每个树在头节点去与不去的最大快乐值。每棵树的最大快乐值取决于子树返回的信息，根据子树信息求出当前树的信息，不断向上返回，最终得到整棵树的去与不去的最大快乐值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 337. 打家劫舍 III</title>
      <link>https://zhuaowei.top/article/leetcode-337.-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii/</link>
      <pubDate>Sat, 23 Dec 2023 21:33:14 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-337.-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/house-robber-iii/&#34;&gt;LeetCode 337. 打家劫舍 III&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;先求出左右子节点可以在偷与不偷时可以获取的最大金额，然后根据子节点的信息汇总出当前节点偷与不偷的最大金额。&lt;/p&gt;&#xA;&lt;h3 id=&#34;求解过程&#34;&gt;求解过程&lt;/h3&gt;&#xA;&lt;p&gt;在求出本节点的信息之前，需要先获取左右子节点的信息，所以需要使用二叉树的后序遍历。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 979. 在二叉树中分配硬币</title>
      <link>https://zhuaowei.top/article/leetcode-979.-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%88%86%E9%85%8D%E7%A1%AC%E5%B8%81/</link>
      <pubDate>Sat, 23 Dec 2023 21:01:39 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-979.-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%88%86%E9%85%8D%E7%A1%AC%E5%B8%81/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/distribute-coins-in-binary-tree/&#34;&gt;LeetCode 979. 在二叉树中分配硬币&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;从树的底层依次向上求，求出当前节点平均分配硬币移动的最小步数。当前节点的最小步数为 树的节点个数减硬币个数的绝对值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 543. 二叉树的直径</title>
      <link>https://zhuaowei.top/article/leetcode-543.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</link>
      <pubDate>Sat, 23 Dec 2023 20:53:06 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-543.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/diameter-of-binary-tree/&#34;&gt;LeetCode 543. 二叉树的直径&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ae411f7AC/&#34;&gt;算法讲解079【必备】树型dp-下&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;求当前节点的最大直径时，分为经过当前节点和不经过当前节点，因此需要记录下左右子树的最大直径和最大高度，求出两种可能性的最大值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 2127. 参加会议的最多员工数</title>
      <link>https://zhuaowei.top/article/leetcode-2127.-%E5%8F%82%E5%8A%A0%E4%BC%9A%E8%AE%AE%E7%9A%84%E6%9C%80%E5%A4%9A%E5%91%98%E5%B7%A5%E6%95%B0/</link>
      <pubDate>Sat, 23 Dec 2023 15:52:28 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-2127.-%E5%8F%82%E5%8A%A0%E4%BC%9A%E8%AE%AE%E7%9A%84%E6%9C%80%E5%A4%9A%E5%91%98%E5%B7%A5%E6%95%B0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/&#34;&gt;LeetCode 2127. 参加会议的最多员工数&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12y4y1F79q/&#34;&gt;算法讲解060【必备】拓扑排序的扩展技巧&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;根据题意，一共 n 个点，n 条边，并且每一个点出发只有一条边，说明该图肯定存在环。根据环的大小分为大环和小环，也就有了两种安排座位的方案，分别计算两种方案的人数，取较大者。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 2050. 并行课程 III</title>
      <link>https://zhuaowei.top/article/leetcode-2050.-%E5%B9%B6%E8%A1%8C%E8%AF%BE%E7%A8%8B-iii/</link>
      <pubDate>Sat, 23 Dec 2023 15:12:06 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-2050.-%E5%B9%B6%E8%A1%8C%E8%AF%BE%E7%A8%8B-iii/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/parallel-courses-iii/&#34;&gt;LeetCode 2050. 并行课程 III&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12y4y1F79q/&#34;&gt;算法讲解060【必备】拓扑排序的扩展技巧&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;完成某一个课程的最短时间为完成所有前置课程的最大时间加上本课程的时间。根据课程的前置关系建图，按照拓扑排序求出下一门课程的最短时间，即完成前置课程和下一门课程的最大时间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 851. 喧闹和富有</title>
      <link>https://zhuaowei.top/article/leetcode-851.-%E5%96%A7%E9%97%B9%E5%92%8C%E5%AF%8C%E6%9C%89/</link>
      <pubDate>Fri, 22 Dec 2023 23:13:31 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-851.-%E5%96%A7%E9%97%B9%E5%92%8C%E5%AF%8C%E6%9C%89/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/loud-and-rich/&#34;&gt;LeetCode 851. 喧闹和富有&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12y4y1F79q/&#34;&gt;算法讲解060【必备】拓扑排序的扩展技巧&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;根据输入的财富关系，我们可以得到一个财富关系图，按照拓扑排序从最有钱的依次遍历，比较前后两人的安静值，得到更符合要求的答案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>洛谷 P4017 最大食物链计数</title>
      <link>https://zhuaowei.top/article/%E6%B4%9B%E8%B0%B7-p4017-%E6%9C%80%E5%A4%A7%E9%A3%9F%E7%89%A9%E9%93%BE%E8%AE%A1%E6%95%B0/</link>
      <pubDate>Fri, 22 Dec 2023 22:40:29 +0800</pubDate>
      <guid>https://zhuaowei.top/article/%E6%B4%9B%E8%B0%B7-p4017-%E6%9C%80%E5%A4%A7%E9%A3%9F%E7%89%A9%E9%93%BE%E8%AE%A1%E6%95%B0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4017&#34;&gt;洛谷 P4017 最大食物链计数&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12y4y1F79q/&#34;&gt;算法讲解060【必备】拓扑排序的扩展技巧&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;&#xA;&lt;p&gt;到达某生物的食物链条数等于所有被他吃的生物的链数之和。生物链的关系可以看作一个有向无环图，按照拓扑排序将食物链条数从被捕食者传递到捕食者，最终得到整个生物捕食关系的食物链总数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode 2477. 到达首都的最少油耗</title>
      <link>https://zhuaowei.top/article/leetcode-2477.-%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%91%E6%B2%B9%E8%80%97/</link>
      <pubDate>Tue, 05 Dec 2023 11:07:39 +0800</pubDate>
      <guid>https://zhuaowei.top/article/leetcode-2477.-%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%91%E6%B2%B9%E8%80%97/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-fuel-cost-to-report-to-the-capital/&#34;&gt;2477. 到达首都的最少油耗&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;p&gt;一共有 n 的点，编号 0 -&amp;gt; n - 1，使用 n - 1 条边进行连接，所以整个图是无环的，并且任意两个节点之间的路径是唯一的。&lt;/p&gt;&#xA;&lt;p&gt;一开始的思路是 求出每个叶子节点到达首都的路径，对于每一条路径，根据节点数就可以计算出油耗，最终相加。后来发现是错误的，因为行驶过程中可以下车换乘。也就是说原本可以坐 3 个人的车，从 2 个节点来到 i ，他们每人都一辆车，到达 i 节点后，算上 i 节点上的人，一共有 3 个人，他们坐一辆车就够了，而不是分别计算油耗。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
