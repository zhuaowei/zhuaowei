<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>可靠传输 on zhuaowei的博客</title>
        <link>https://zhuaowei.github.io/tags/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</link>
        <description>Recent content in 可靠传输 on zhuaowei的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 31 Oct 2022 21:21:51 +0800</lastBuildDate><atom:link href="https://zhuaowei.github.io/tags/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TCP 可靠传输的实现</title>
        <link>https://zhuaowei.github.io/article/tcp-%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 31 Oct 2022 21:21:51 +0800</pubDate>
        
        <guid>https://zhuaowei.github.io/article/tcp-%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;h2 id=&#34;1tcp-可靠传输的实现&#34;&gt;1、TCP 可靠传输的实现&lt;/h2&gt;
&lt;p&gt;为了方便描述，假定数据传输只有一个方向。A 发送数据，B 发送确认。&lt;/p&gt;
&lt;h3 id=&#34;11以字节为单位的滑动窗口&#34;&gt;1.1、以字节为单位的滑动窗口&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、发送窗口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如 A 收到了 B 发来的确认报文，报文内容是：&lt;code&gt;ack = 31, rwnd = 20&lt;/code&gt;，这说明：B 已经收到了序号为 30 之前的报文了，期待发送的是序号为 31 的报文，窗口大小是 20，也就是 A 能发送序号为 31 - 50 的报文，这个范围就是 A 的&lt;strong&gt;发送窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;发送窗口里是允许发送且不需要确认的报文，这些报文在&lt;strong&gt;没有收到确认之前都要保留&lt;/strong&gt;，以防超时重发。&lt;/p&gt;
&lt;p&gt;收到确认报文后，确认序号前的报文就都可以释放了，然后 A 的发送窗口就可以向前移动，但是不能超过 B 的窗口值。&lt;/p&gt;
&lt;p&gt;接收方也有一个接收窗口，接收窗口和发送窗口是一样的，接收方只对&lt;strong&gt;按序到达的最后一个报文&lt;/strong&gt;发送确认。&lt;/p&gt;
&lt;p&gt;例如：接收方发送了 &lt;code&gt;ack = 31, rwnd = 20&lt;/code&gt;，此时接收窗口就是 31 - 50，31 之前的已经交付给主机并释放掉了。这是 A 发来了序号为 32， 33，的报文，B 不能发送 &lt;code&gt;ack = 34&lt;/code&gt; 的报文，只能发送 &lt;code&gt;ack = 31&lt;/code&gt; 的报文，因为他们不是按序到达的。如果 A 又发来了序号为 31，37， 38， 40的报文，B 可以发送 &lt;code&gt;ack = 34&lt;/code&gt; 的报文。当 A 收到这个确认报文后就可以将发送窗口向前移动 3 个位置了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ^                               ^                       ^
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |p1 &amp;lt;------- 已发未确认 -------&amp;gt; |p2 &amp;lt;---- 允许但未发 ----&amp;gt;|p3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |  &amp;lt;--------------------- 发送窗口 -------------------&amp;gt;  |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;A 在发送时，P2指针会一直向前移动，直到与 p3 重合，但不会超过 p3。如果 p2、p3 重合，就必须停止发送，在超时计时器到时间后，就要重新发送未确认的报文，然后重置超时计时器，如此循环，直到收到 B 的确认报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、发送缓存和接收缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送方的应用程序把字节流写入 TCP 的发送缓存，接收方的应用进程从接收缓存中读取字节流。&lt;/p&gt;
&lt;p&gt;关于发送缓存和接收缓存：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它们的空间都是有限的，且是循环使用的。&lt;/li&gt;
&lt;li&gt;实际缓存或这窗口的字节数都是很大的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3、发送缓存&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存放应用程序传送给发送方 TCP 的准备发送的数据：&lt;/li&gt;
&lt;li&gt;存放 TCP 已经发送但是尚未收到确认的数据。1 包含 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发送窗口是发送缓存的一部分。已经确认的数据应当从缓存中删除。应用程序不应当发送过快，否则会没有空间存放数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、接收缓存&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存放收到的数据&lt;/li&gt;
&lt;li&gt;存放未被应用程序读取的数据（按序到达的部分）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果收到的分组被检测到有差错就要丢弃。&lt;/p&gt;
&lt;p&gt;如果应用程序来不及读取到达的数据，那么缓存最终就会被填满，接收窗口就会减小到0；反之，缓存空间就会变大，接收窗口也会变大，但是不会超过缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虽然发送窗口是由接收窗口设置的，但是统一时刻，这两个窗口是可能不一样的，因为网络传输有延迟。&lt;/li&gt;
&lt;li&gt;对于不按序到达的数据，没有明确处理方式，接收方可以完全丢弃，但是浪费资源，一般是临时存储到接收窗口中，然后&lt;strong&gt;按序上交到应用程序&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;TCP 要求接收方必须有累积确认的功能，这样可以减少开销。接收方也可以在合适的时候发送确认，也可以在发送数据时&lt;strong&gt;捎带确认信息&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;确认推迟的时间不得超过 0.5 秒。如果收到一连串最大长度的报文端，必须每隔一段时间发送一个确认。&lt;/li&gt;
&lt;li&gt;捎带确认信息的情况不常见，因为很少有双向发送的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12超时重传时间的选择&#34;&gt;1.2、超时重传时间的选择&lt;/h3&gt;
&lt;p&gt;超时重传时间对网络的影响：时间太短，引起不必要的重传，增大网络开销；时间太长，网络利用率减小，传输效率降低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、超时重传时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报文段的往返时间 RTT&lt;/strong&gt;：发送一个报文，记录它的发送时间，和收到相应确认报文的接收时间。这个时间差就是报文段的往返时间 RTT。&lt;/p&gt;
&lt;p&gt;TCP 保留了一个 RTT 的&lt;strong&gt;加权平均返回时间 RTTs（S表示Smoothed，因为加权使它更平滑）&lt;/strong&gt;，每次测到新的 RTT 样本时，就计算一下新的 RTTs。
$$
新的 RTT_s = (1 - \alpha) \times (旧的 RTT_s) + \alpha \times (新的 RTT 样本)
$$
$0 \le \alpha \lt 1$，当 $\alpha$ 很接近 0，新的 RTTs 和旧的 RTTs 变化不大，（RTT 值更新较慢）；当 $\alpha$ 接近 1，RTTs 受 RTT 的影响较大，（RTT 值更新较快）。官方建议的 $\alpha$ 的值是 $\frac{1}{8}$，也就是 0.125。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时重传时间 RTO（RetransmissionTime-Out）&lt;/strong&gt;:
$$
RTO = RTT_s + 4 \times RTT_D
$$
$RTT_D$ 是 RTT 的偏差的加权平均值，它与 $RTT_s$ 和新的 RTT 样本之差有关。建议使用下面的公式计算：
$$
新的 RTT_D = (1 - \beta) \times (旧的 RTT_D) + \beta \times \lvert RTT_s - 新的 RTT 样本 \rvert
$$
$\beta$ 是一个小于 1 的系数，它是推荐值是 $\frac{1}{4}$，也就是 0.25。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、重传确认时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果确认报文丢失，超时后重传计算的超时重传时间会明显增大。如果从重传后开始计算时间，碰到确认延迟的情况，刚重传就收到了确认报文，超时重传时间就会明显减小，这样又会导致更多的报文重传。&lt;/p&gt;
&lt;p&gt;因此，Karn 提出一个算法：在计算加权平均 RTTs 时，&lt;strong&gt;只要报文段重传了，就不采用其往返时间样本&lt;/strong&gt;。这样计算出的加权平均 RTTs 和 RTO 就比较准确。&lt;/p&gt;
&lt;p&gt;但是，这样又会出现新的问题，当网络延时突然增大，规定时间内收不到确认报文，刚刚发出的报文就需要重新发送，然而这些重发的报文是不计入往返时间样本的，这就导致 RTTs 和 RTO 就无法更新。&lt;/p&gt;
&lt;p&gt;所以要对上面的算法修正：每次重传，就将超时重传时间 RTO 增大为原来的 2 倍。&lt;/p&gt;
&lt;h3 id=&#34;13选择确认-sack&#34;&gt;1.3、选择确认 SACK&lt;/h3&gt;
&lt;p&gt;当接收方收到了报文无差错，只是没有按序号，接收方是不能发送确认报文的，发送方能否只重发按序到达中缺少的那部分报文？答案是可以。&lt;/p&gt;
&lt;p&gt;例如：接收方收到了几段不连续的报文&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|1--------1000|         |1501--------3000|       |3501--------4500|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|             |         |L1              |R1     |L2              |R2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 边界信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;L1 = 1501, R1 = 3001
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;L2 = 3501, R2 = 4501
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果要准确告诉对方这些信息，就要使用&lt;strong&gt;选择确认SACK描述这些信息&lt;/strong&gt;。如果使用这个功能，双方一开始就要约定好使用这个选项，原来的 ACK 功能不变。因为 TCP 的首部选项最多只能有 40 字节，所以 SACK 应该按如下安排：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SACK：1 个字节，指明使用SACK。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选项长度：1 个字节，指明选项的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边界信息：一个字节块有 2 个边界，一个边界需要 4 个字节，所以最多可以有 4 个字节块的边界信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
