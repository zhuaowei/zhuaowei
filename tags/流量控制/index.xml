<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>流量控制 on zhuaowei的博客</title>
        <link>https://zhuaowei.top/tags/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
        <description>Recent content in 流量控制 on zhuaowei的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 01 Nov 2022 12:49:44 +0800</lastBuildDate><atom:link href="https://zhuaowei.top/tags/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TCP 的流量控制</title>
        <link>https://zhuaowei.top/article/tcp-%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Tue, 01 Nov 2022 12:49:44 +0800</pubDate>
        
        <guid>https://zhuaowei.top/article/tcp-%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
        <description>&lt;h2 id=&#34;1tcp-的流量控制&#34;&gt;1、TCP 的流量控制&lt;/h2&gt;
&lt;h3 id=&#34;11利用滑动窗口实现流量控制&#34;&gt;1.1、利用滑动窗口实现流量控制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、接收窗口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量控制（flow control）&lt;/strong&gt;：就是让发送方的发送速率不要太快，要让接收方来的及接收。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区别于拥塞控制：流量控制是点对点的，发送和接收双方的传送速率控制；而拥塞控制是设计到整个网络的，是限制发送速率，防止短时间有大量数据传送进网络，避免整个网络发生拥塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设 A 向 B 发送数据，在连接建立时，B 发送给 A 的确认报文中包含了一个接收窗口的大小 &lt;code&gt;rwnd = 400&lt;/code&gt;，这个值告诉 A 我还有多少字节空间可以接收数据。因此，&lt;strong&gt;发送方 的发送窗口不能超过接收方给出的接收窗口的数值&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;接收窗口的单位是字节。&lt;/li&gt;
&lt;li&gt;只有 ACK = 1 的确认报文才有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;当接收窗口的值为 0 时，发送方就不允许发送了，发送方会一直暂停发送，直到接收方发来接收窗口不为 0 的报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、持续计时器 persistence timer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当发送方收到了零窗口报文后就停止发送了，过了一段时间后，接收方有空间接收报文，就发送了一个非零窗口报文，恰巧这个报文丢失了，那么就会发生死锁，双方会一直等待。&lt;/p&gt;
&lt;p&gt;为了解决上面的问题，TCP 设置了一个&lt;strong&gt;持续计时器（persistence timer）&lt;/strong&gt;，只要发送方收到了接收方发送过来的零窗口报文，就会启动这个计时器，计时器到期后，发送方就会发送一个探测报文段（仅有 1 字节数据）。接收方收到这个报文会给出一个确认报文，如果窗口值不为零，那么发送方就可以发送数据了；如果仍然为零，那么发送方在接收到这个报文时就会重设持续计时器。&lt;/p&gt;
&lt;h3 id=&#34;12tcp-的传输效率&#34;&gt;1.2、TCP 的传输效率&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、TCP 报文发送时机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大报文段长度MSS（Maximum Segment Size）&lt;/strong&gt;:TCP 维持的一个变量。&lt;/p&gt;
&lt;p&gt;应用进程将数据传送到 TCP 的发送缓存后，TCP 有三种机制控制发送时机：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只要缓存中存放的数据达到 MSS 字节时，就组装成一个报文发送出去。&lt;/li&gt;
&lt;li&gt;由发送方的应用程序指明要求发送报文段，即 TCP支持**推送（push）**操作。&lt;/li&gt;
&lt;li&gt;发送方的一个计时器期限到了，这时就把已有的缓存数据装入报文段（长度不超过 MSS）发送出去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2、Nagle 算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若发送方的应用程序把要发送的数据逐个字节地发送到 TCP 的发送缓存中，那么发送方就把第一个字节先发送出去，把剩下的字节缓存起来。当发送方收到第一个字节的确认后，再把剩下的缓存中的数据组装成一个报文发送出去，接着对随后到达的数据进行缓存，同时等待确认，发送下一个报文。当数据到达较快而网络速率较慢时，用这样的方法可明显减少所用的网络带宽。&lt;/p&gt;
&lt;p&gt;当到达的数据已达到发送窗口的一般或已达到报文段的最大长度时，就立即发送一个报文段，这样做，就可以有效地提高网络的吞吐量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、糊涂窗口综合征（silly window syndrome）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 的接收窗口已满，而交互式的进程一次只从接收缓存读取 1 个字节，然后发送确认，把窗口值设置为1；发送方再发送一个 1 字节的报文，这样会使网络的效率变得很低。（20字节IP数据报头部，20字节TCP数据报头部，只携带1字节数据，而且确认报文也是如此，40字节头部，不包含数据）&lt;/p&gt;
&lt;p&gt;解决方法：接收方等待一段时间，等到接收缓存有空间容纳一个最大长度的报文段，或者等到接收方的缓存有一半空闲，这个时候就可以向发送方发送确认报文，告知自己的接收窗口大小。此外，发送方也不要发送太小的报文段，等累积到足够大的报文段或者达到发送缓存的一半大小再发送。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
