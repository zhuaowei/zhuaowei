<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>TCP on zhuaowei的博客</title>
        <link>https://zhuaowei.top/tags/tcp/</link>
        <description>Recent content in TCP on zhuaowei的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 01 Nov 2022 16:38:24 +0800</lastBuildDate><atom:link href="https://zhuaowei.top/tags/tcp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TCP 的三次握手和四次挥手</title>
        <link>https://zhuaowei.top/article/tcp-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
        <pubDate>Tue, 01 Nov 2022 16:38:24 +0800</pubDate>
        
        <guid>https://zhuaowei.top/article/tcp-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
        <description>&lt;h2 id=&#34;1tcp-的运输连接管理&#34;&gt;1、TCP 的运输连接管理&lt;/h2&gt;
&lt;p&gt;TCP 是面向连接的协议，连接建立和连接释放是每次面向连接通信必不可少的过程。运输连接有三个阶段：连接建立、数据传输和连接释放。TCP 连接建立要解决以下三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要是每一方能够确知对方的存在。&lt;/li&gt;
&lt;li&gt;允许双方协商一些参数。&lt;/li&gt;
&lt;li&gt;能够对运输实体资源进行分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TCP 连接采用客户服务器方式。主动发起连接建立的应用进程叫作&lt;strong&gt;客户（client）&lt;/strong&gt;，而被动等待连接建立的应用进程叫作&lt;strong&gt;服务器（server）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;11tcp-连接的建立三次握手&#34;&gt;1.1、TCP 连接的建立（三次握手）&lt;/h3&gt;
&lt;p&gt;TCP 建立连接的过程叫作握手，握手需要在客户和服务器之间交换三个 TCP 报文段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   A   |                                                     |   B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Client | ---------------- SYN = 1, seq = x ----------------&amp;gt; | Server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       |                                                     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       | &amp;lt;----- SYN = 1, ACK = 1, seq = y, ack = x + 1 ----- |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       |                                                     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       | -------- ACK = 1, seq = x + 1, ack = y + 1 --------&amp;gt;|
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上述过程中，A 主动打开连接，B 被动打开连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、连接建立之前&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;B 的 TCP 服务器进程先创建&lt;strong&gt;传输控制块 TCB&lt;/strong&gt;，准备接受客户进程的连接请求，然后服务器进程就处于 &lt;code&gt;LISTEN&lt;/code&gt; 状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传输控制块 TCB：存储了每一个连接中的重要信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A 的 TCP 客户进程也是首先创建&lt;strong&gt;传输控制模块 TCB&lt;/strong&gt;。然后就可以发送 TCP 连接建立请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、连接建立过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一次握手：A 发送一个连接请求报文 &lt;code&gt;SYN = 1, seq = x&lt;/code&gt;。TCP 规定：SYN 报文段不能携带数据，但是要消耗一个序号。发送完成后，A 进入 &lt;code&gt;SYN-SNET&lt;/code&gt; 状态（同步已发送）。&lt;/p&gt;
&lt;p&gt;第二次握手：B 收到请求报文后，如果同意请求，就发送一个确认报文 &lt;code&gt;SYN = 1, ACK = 1, seq = y, ack = x + 1&lt;/code&gt;。这个报文也属于 SYN 报文，也不能携带数据，确认号 &lt;code&gt;ack = seq + 1&lt;/code&gt;，也要选择一个自己的确认号。发送完确认报文后，B 进入 &lt;code&gt;SYN-RCVD&lt;/code&gt; 状态（同步收到）。&lt;/p&gt;
&lt;p&gt;第三次握手：A 收到 B 的确认报文后，也需要给出确认 &lt;code&gt;ACK = 1, seq = x + 1, ack = y + 1&lt;/code&gt;。ACK 报文可以携带数据，如果不携带数据，则不消耗序号。这时 A 进入&lt;code&gt;ESTABLISHED&lt;/code&gt; 状态（连接确认）。&lt;/p&gt;
&lt;p&gt;B 收到 A 的确认后，也进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B 发送给 A 的确认报文可以分为两次发送，这样就是&lt;strong&gt;四次握手&lt;/strong&gt;，但本质上没有区别。&lt;/p&gt;
&lt;p&gt;两次报文分别是：&lt;code&gt;ACK = 1， ack = x + 1&lt;/code&gt; 和 &lt;code&gt;SYN = 1, seq = y&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3、为何要第三次握手？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设 A 发送了一次连接请求，这个请求不幸丢失了，那么 A 就会再次发送请求，B 收到后给出确认，之后正常进行，没有什么问题。但是，如果 A 的第一次连接在网络中长时间滞流，滞留到 A 的第二次连接已经完成数据传送，并且释放掉了，这时第一次的连接请求才来到 B。如果不采用第三次握手，B 给出确认就建立了连接，但是 A 并没有要建立连接，B 就一直等待数据传送，白白浪费了资源。如果采用第三次握手，A 不会向 B 的第二次连接请求确认发出确认。&lt;/p&gt;
&lt;h3 id=&#34;12tcp-的连接释放四次挥手&#34;&gt;1.2、TCP 的连接释放（四次挥手）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    A   |                                                 |   B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Client | -------------- FIN = 1, seq = u --------------&amp;gt; | Server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        | &amp;lt;------- ACK = 1, seq = v, ack = u + 1 -------- | 立即发送
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        | &amp;lt;--- FIN = 1, ACK = 1, seq = w, ack = u + 1 --- |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        | ------- ACK = 1, seq = u + 1, ack = w + 1 ----&amp;gt; |CLOSED
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |                                                 |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在连接释放之前，A、B 都处于连接建立状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、释放连接过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一次挥手&lt;/strong&gt;：A 发送请求释放连接报文 &lt;code&gt;FIN = 1, seq = u&lt;/code&gt;。此时 A 进入 &lt;code&gt;FIN-WAIT-1&lt;/code&gt; 状态（终止等待1），也不再发送数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二次挥手&lt;/strong&gt;：B 收到 A 的连接释放报文段后立即发出确认 &lt;code&gt;ACK = 1, seq = v, ack = u + 1&lt;/code&gt;。报文的序号 v 是前面已传送过数据的最后一个字节的序号加 1。此时 B 进入&lt;code&gt;CLOSE-WAIT&lt;/code&gt; 状态（关闭等待），B 仍然可以向 A 发送数据，TCP 处于**半关闭（half-close）**状态。&lt;/p&gt;
&lt;p&gt;A 收到确认报文后，进入 &lt;code&gt;FIN-WAIT-2&lt;/code&gt; 状态（终止等待2）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三次挥手&lt;/strong&gt;：B 确定没有数据要向 A 发送了，应用进程就通知 TCP 释放连接。这时 B 发出连接释放报文 &lt;code&gt;FIN = 1, ACK = 1, seq = w, ack = u + 1&lt;/code&gt;。报文确认号必须还是上次的 &lt;code&gt;ack = u + 1&lt;/code&gt;，这时 B 进入 &lt;code&gt;LAST-ACK&lt;/code&gt; 状态（最后确认）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四次挥手&lt;/strong&gt;：A 在收到 B 的连接释放报文后，必须对此发出确认 &lt;code&gt;ACK = 1, seq = u + 1, ack = w + 1&lt;/code&gt;。然后进入 &lt;code&gt;TIME-WAIT&lt;/code&gt; 状态（时间等待）。TCP 连接现在还没有释放，必须经过**时间等待计时器（TIME-WAIT timer）**设置的时间 2MSL 后，A 才进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSL（Maximum Segment Lifetime）&lt;/strong&gt;：最长报文段寿命，RFC 793 建议设为 2 分钟。&lt;/p&gt;
&lt;p&gt;所以 A 要经过 4 分钟才能进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态，当 A 撤销相应的传输控制块 TCB 后，就结束了这次的 TCP 连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、为什么 &lt;code&gt;TIME-WAIT&lt;/code&gt; 状态要等待 2MSL？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一，为了保证 A 发送的最后一个 ACK 报文能够到达 B。如果 最后一个 ACK 报文丢了，B 就会重发第三次握手的报文，A 收到报文后再次发送 ACK 报文，并重设 2MSL 计时器。如果不设置这个计时器，A 就无法收到重发的报文，也就不会重发确认报文，B 最终无法正常进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B 一旦收到 A 的确认报文就进入了 &lt;code&gt;CLOSED&lt;/code&gt; 状态，并且撤销相应的传输控制块 TCB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二，防止已失效的报文出现在本连接中。A 发送完最后一个 ACK 报文后，再经过 2MSL 的时间，就可以使本连接中出现的所有报文都从网络中消失。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、保活计时器 keepalive timer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么设置这个计时器呢？防止在连接建立后，客户端突然噶了，服务器就不能收到客户发来的数据，于是白白等待下去。&lt;/p&gt;
&lt;p&gt;服务器每次收到客户发来的数据，就会重置一下保活计时器。保活计时器的时间通常设置为 2 小时，2 小时过后，服务器还是没有收到客户端的数据，就发送一个探测报文，之后每个 75 秒发送一次，一共连发 10 次，10 次之后还是没有回应，就认为客户端噶了，于是关闭这个连接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;等了两个小时，还要每隔 75 秒发送一次消息，还连发 10 次，真的“他温我哭”。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>TCP 的拥塞控制</title>
        <link>https://zhuaowei.top/article/tcp-%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Tue, 01 Nov 2022 16:38:20 +0800</pubDate>
        
        <guid>https://zhuaowei.top/article/tcp-%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</guid>
        <description>&lt;h2 id=&#34;1tcp-的拥塞控制&#34;&gt;1、TCP 的拥塞控制&lt;/h2&gt;
&lt;h3 id=&#34;11拥塞控制的一般原理&#34;&gt;1.1、拥塞控制的一般原理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、拥塞的定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞（congestion）&lt;/strong&gt;：网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏。&lt;/p&gt;
&lt;p&gt;拥塞是一个复杂的问题，它并不是增加某一个资源就能解决的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、造成拥塞的因素&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;某个节点的缓存容量不足，无法暂存分组，只得丢弃分组。&lt;/li&gt;
&lt;li&gt;节点的处理机的处理速度太慢。&lt;/li&gt;
&lt;li&gt;输出链路的容量不足。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只提高上面某一项资源是不足以解决拥塞问题的。例如只增大缓存容量，到达节点的分组会逐渐增多，不过不增大处理速度和输出容量，缓存迟早会占满。另外两项同理。&lt;/p&gt;
&lt;p&gt;拥塞还有一个特点，就是常常会趋于恶化。例如，某个分组因拥塞而被丢弃，那么发送方就会重传这一分组，可能还会重传多次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、拥塞控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;：防止过多的主矩注入到网络中，这样可以是网络中的路由器或链接不致过载。即网络能够承受现有的网络负荷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拥塞控制和流量控制的区别：&lt;/p&gt;
&lt;p&gt;流量控制是端到端的通信量的控制，只涉及发送和接收两方的主机。&lt;/p&gt;
&lt;p&gt;拥塞控制是一个全局性的过程，涉及到网络中所有的主机，路由器等与拥塞有关的因素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;4、负载与吞吐量的关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提供的负载（offered load）&lt;/strong&gt;：单位时间内输入给网络的分组的数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;吞吐量（throughput）&lt;/strong&gt;：单位时间内从网络输出分组的数量。&lt;/p&gt;
&lt;p&gt;理想状态下，在某一限度内，吞吐量和负载是相等的，当超过一定限度，吞吐量就会达到饱和，不再变化。&lt;/p&gt;
&lt;p&gt;实际上，不设置拥塞控制的情况下，在网络还未到达所说的限度时，就已经开始拥塞，即输入的负载大于输出的吞吐量。当吞吐量明显小于理想的吞吐量时，网络就进入了&lt;strong&gt;轻度拥塞状态&lt;/strong&gt;。当提供的负载达到某一数值时，吞吐量不增反降，网络就进入到了&lt;strong&gt;拥塞状态&lt;/strong&gt;。当负载继续增大，直到吞吐量下降到零，网络就进入到了&lt;strong&gt;死锁状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在有拥塞控制的网络中，吞吐量会随着提供的负载增大而增大，但永远不会到达理想的吞吐量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、拥塞控制的设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拥塞控制有两种方法，&lt;strong&gt;开环控制&lt;/strong&gt;和&lt;strong&gt;闭环控制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开环控制&lt;/strong&gt;：实现将所有的拥塞的因素都考虑到，避免发生拥塞，一旦整个系统运行，就不再中途修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;闭环控制&lt;/strong&gt;：基于反馈环路的概念，主要有以下几种措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监测网络系统，以便检测拥塞何时，何处发生。&lt;/li&gt;
&lt;li&gt;把拥塞发生的信息传送到可采取行动的地方。&lt;/li&gt;
&lt;li&gt;调整网络系统的运行以解决出现的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了监测网络拥塞，需要选择一些指标，例如丢弃分组的百分比，平均分组时延，平均队列长度，超时重传的分组数等等。&lt;/p&gt;
&lt;p&gt;一般会将拥塞的信息传送到产生分组的源站，但这会加剧拥塞，另一种方式是在转发分组保留一个字段或比特，表示是否产生拥塞。还可以由一些主机和路由周期性地发出探测分组，询问是否发生拥塞。&lt;/p&gt;
&lt;h3 id=&#34;12tcp-的拥塞控制方法&#34;&gt;1.2、TCP 的拥塞控制方法&lt;/h3&gt;
&lt;p&gt;TCP 使用四种拥塞控制算法：&lt;strong&gt;慢开始（slow-start）&lt;/strong&gt;，&lt;strong&gt;拥塞避免(congestion avoidance)&lt;/strong&gt;，&lt;strong&gt;快重传（fast retransmit）&lt;/strong&gt;，&lt;strong&gt;快恢复（fast recovery）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在假设：数据传输是单方面的，接收方有充足空间接收数据，发送窗口由拥塞程度决定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、慢开始和拥塞避免&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞窗口cwnd（congestion window）&lt;/strong&gt;：发送方维持的一个状态变量，取决于网络的拥塞程度，并动态变化。因为接收方的空间无限大，所以就&lt;strong&gt;让发送方的发送窗口等于拥塞窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如何判断网络是否发生拥塞？&lt;strong&gt;依据就是出现超时&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;慢开始&lt;/strong&gt;：刚开始发送的时候，并不知道网络的状况，为了防止数据输入过多而发生拥塞，就先试探一下，即&lt;strong&gt;由小到大逐渐增大发送窗口&lt;/strong&gt;，也即&lt;strong&gt;由小到大逐渐增大拥塞窗口的数值&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SMSS（Sender Maximum Segment Size）&lt;/strong&gt;：发送方最大发送报文段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥塞窗口的单位是字节，这里为了方面说明，将 SMSS 作为拥塞窗口的单位&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;在刚开始发送时，把初始拥塞窗口设置为 1 至 2 个 SMSS。新规定是不超过 2 - 4 个 SMSS。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若 SMSS &amp;gt; 2190 字节：不得超过 2 个 SMSS。&lt;/li&gt;
&lt;li&gt;若 SMSS &amp;gt; 1095 字节：不得超过 3 个 SMSS。&lt;/li&gt;
&lt;li&gt;若 SMSS &amp;lt;= 1095 字节：不得超过 4 个 SMSS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每收到一个&lt;strong&gt;对新的报文段的确认&lt;/strong&gt;后，就可以把拥塞窗口增加最多一个 SMSS 的数值。
$$
拥塞窗口 cwnd 每次的增加量 = min(N, SMSS)
$$
N 是原先未被确认、但现在被刚收到的确认报文所确认的字节数。&lt;/p&gt;
&lt;p&gt;每经过一个传输轮次，拥塞窗口 cwnd 就加倍。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         发送方                           接收方
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cwnd = 1   |                               |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           | ----------------------------&amp;gt; | 传输 1 个报文
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           | &amp;lt;---------------------------- | 轮次1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cwnd = 2   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           | ----------------------------&amp;gt; | 传输 2 个报文
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           | &amp;lt;---------------------------- | 轮次2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cwnd = 4   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           | ----------------------------&amp;gt; | 传输 4 个报文
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           | &amp;lt;---------------------------- | 轮次3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cwnd = 8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;慢开始门限（ssthresh）&lt;/strong&gt;：为了防止拥塞窗口增长过大而引起网络拥塞，需要设置一个慢开始门限。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cwnd &amp;lt; ssthresh：使用慢开始算法。&lt;/li&gt;
&lt;li&gt;cwnd &amp;gt; ssthresh：停止使用慢开始算法，使用拥塞避免算法。&lt;/li&gt;
&lt;li&gt;cwnd = ssthresh：即可使用慢开始算法，也可使用拥塞避免算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2、拥塞避免&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拥塞避免是让拥塞窗口缓慢增大，每经过一个往返时间 RTT 就把发送方的拥塞窗口加 1（&lt;strong&gt;加法增大&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;当网络中出现超时，发送方判断为网络拥塞。于是调整门限值 &lt;code&gt;ssthresh = cwnd / 2&lt;/code&gt;，同时设置拥塞窗口 &lt;code&gt;cwnd = 1&lt;/code&gt;，进入慢开始阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、快重传&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当发送方连续收到 3 个来自同一报文的确认时，说明不是网络发生了拥塞，而是自己发送的报文丢失了，需要尽快重传。&lt;/p&gt;
&lt;p&gt;快重传要求&lt;strong&gt;接收方要立即发送确认&lt;/strong&gt;，即使收到的报文是失序的，不能等到发送数据时捎带确认。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、快恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当发送方收到了上面情况的报文，发送方就知道只是丢失了个别的报文，于是就执行快恢复算法。调整门限值 &lt;code&gt;ssthresh = cwnd / 2&lt;/code&gt;，同时设置 &lt;code&gt;cwnd = ssthresh&lt;/code&gt;，并开始拥塞避免算法。&lt;/p&gt;
&lt;p&gt;从上面可以看出，拥塞避免阶段拥塞窗口值是线性增长，也叫&lt;strong&gt;加法增大AI（additive Increase）&lt;/strong&gt;。而一旦超时或者收到 3 个重复确认就要降低门限值为原来的一半，并大大减小拥塞窗口的值，这也叫&lt;strong&gt;乘法减小MD（Multiplication Decrease）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;上面的算法是假设接收方有足够的空间接收报文段，只考虑了拥塞窗口。现实情况下，&lt;strong&gt;发送方的发送窗口也不能超过接收方给出的接收窗口值 rwnd&lt;/strong&gt;。所以：
$$
发送窗口的上限值 = Min[rwnd, cwnd]
$$&lt;/p&gt;
&lt;h3 id=&#34;13主动队列管理-aqm&#34;&gt;1.3、主动队列管理 AQM&lt;/h3&gt;
&lt;p&gt;网络层采取的策略与 TCP 拥塞控制的关系：如果网络中某一个路由器的处理时间特别长，导致这个啊勃文超时重传，TCP 就认为网络中发生了拥塞，实际上并没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尾部丢弃策略（tail-drop policy）&lt;/strong&gt;：路由器按照先进先出的规则处理收到的分组，如果队列已经满了，那么排在队列尾部的分组就会被丢弃。&lt;/p&gt;
&lt;p&gt;如果采用尾部丢弃策略，丢弃尾部往往会导致一连串分组的丢失，发送方的 TCP 就会进入慢开始状态。如果尾部丢弃一下导致很多 TCP 连接进入慢开始状态，这种情况被称为全局同步（global synchronization）。网络恢复后，通信量会突然大增。&lt;/p&gt;
&lt;p&gt;为了避免全局同步现象，提出了 &lt;strong&gt;主动队列管理AQM（active Queue Management）&lt;/strong&gt;。在队列出现某种拥塞征兆时就主动丢弃到达的分组。实现方法有很多，流行的是&lt;strong&gt;随机早期检测RED（Random Early Detection）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实现 RED 要维持两个变量：队列长度最小门限和最大门限。当分组到达时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若平均队列长度小于最小门限，新到的分组入队。&lt;/li&gt;
&lt;li&gt;若平均队列长度大于最大门限，新到的分组丢弃。&lt;/li&gt;
&lt;li&gt;若平均队列长度在最小门限和最大门限之间，按照某一丢弃概率 p 丢弃。（随机性）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最难处理的就是概率 p 的选择，对于每个分组都要计算丢弃概率 p。&lt;/p&gt;
&lt;p&gt;事实证明 RED 效果不太理想，但是 AQM 是必要的，代替 RED 的算法都正在实验中。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TCP 的流量控制</title>
        <link>https://zhuaowei.top/article/tcp-%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Tue, 01 Nov 2022 12:49:44 +0800</pubDate>
        
        <guid>https://zhuaowei.top/article/tcp-%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
        <description>&lt;h2 id=&#34;1tcp-的流量控制&#34;&gt;1、TCP 的流量控制&lt;/h2&gt;
&lt;h3 id=&#34;11利用滑动窗口实现流量控制&#34;&gt;1.1、利用滑动窗口实现流量控制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、接收窗口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量控制（flow control）&lt;/strong&gt;：就是让发送方的发送速率不要太快，要让接收方来的及接收。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区别于拥塞控制：流量控制是点对点的，发送和接收双方的传送速率控制；而拥塞控制是设计到整个网络的，是限制发送速率，防止短时间有大量数据传送进网络，避免整个网络发生拥塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设 A 向 B 发送数据，在连接建立时，B 发送给 A 的确认报文中包含了一个接收窗口的大小 &lt;code&gt;rwnd = 400&lt;/code&gt;，这个值告诉 A 我还有多少字节空间可以接收数据。因此，&lt;strong&gt;发送方 的发送窗口不能超过接收方给出的接收窗口的数值&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;接收窗口的单位是字节。&lt;/li&gt;
&lt;li&gt;只有 ACK = 1 的确认报文才有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;当接收窗口的值为 0 时，发送方就不允许发送了，发送方会一直暂停发送，直到接收方发来接收窗口不为 0 的报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、持续计时器 persistence timer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当发送方收到了零窗口报文后就停止发送了，过了一段时间后，接收方有空间接收报文，就发送了一个非零窗口报文，恰巧这个报文丢失了，那么就会发生死锁，双方会一直等待。&lt;/p&gt;
&lt;p&gt;为了解决上面的问题，TCP 设置了一个&lt;strong&gt;持续计时器（persistence timer）&lt;/strong&gt;，只要发送方收到了接收方发送过来的零窗口报文，就会启动这个计时器，计时器到期后，发送方就会发送一个探测报文段（仅有 1 字节数据）。接收方收到这个报文会给出一个确认报文，如果窗口值不为零，那么发送方就可以发送数据了；如果仍然为零，那么发送方在接收到这个报文时就会重设持续计时器。&lt;/p&gt;
&lt;h3 id=&#34;12tcp-的传输效率&#34;&gt;1.2、TCP 的传输效率&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、TCP 报文发送时机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大报文段长度MSS（Maximum Segment Size）&lt;/strong&gt;:TCP 维持的一个变量。&lt;/p&gt;
&lt;p&gt;应用进程将数据传送到 TCP 的发送缓存后，TCP 有三种机制控制发送时机：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只要缓存中存放的数据达到 MSS 字节时，就组装成一个报文发送出去。&lt;/li&gt;
&lt;li&gt;由发送方的应用程序指明要求发送报文段，即 TCP支持**推送（push）**操作。&lt;/li&gt;
&lt;li&gt;发送方的一个计时器期限到了，这时就把已有的缓存数据装入报文段（长度不超过 MSS）发送出去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2、Nagle 算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若发送方的应用程序把要发送的数据逐个字节地发送到 TCP 的发送缓存中，那么发送方就把第一个字节先发送出去，把剩下的字节缓存起来。当发送方收到第一个字节的确认后，再把剩下的缓存中的数据组装成一个报文发送出去，接着对随后到达的数据进行缓存，同时等待确认，发送下一个报文。当数据到达较快而网络速率较慢时，用这样的方法可明显减少所用的网络带宽。&lt;/p&gt;
&lt;p&gt;当到达的数据已达到发送窗口的一般或已达到报文段的最大长度时，就立即发送一个报文段，这样做，就可以有效地提高网络的吞吐量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、糊涂窗口综合征（silly window syndrome）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 的接收窗口已满，而交互式的进程一次只从接收缓存读取 1 个字节，然后发送确认，把窗口值设置为1；发送方再发送一个 1 字节的报文，这样会使网络的效率变得很低。（20字节IP数据报头部，20字节TCP数据报头部，只携带1字节数据，而且确认报文也是如此，40字节头部，不包含数据）&lt;/p&gt;
&lt;p&gt;解决方法：接收方等待一段时间，等到接收缓存有空间容纳一个最大长度的报文段，或者等到接收方的缓存有一半空闲，这个时候就可以向发送方发送确认报文，告知自己的接收窗口大小。此外，发送方也不要发送太小的报文段，等累积到足够大的报文段或者达到发送缓存的一半大小再发送。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TCP 可靠传输的实现</title>
        <link>https://zhuaowei.top/article/tcp-%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 31 Oct 2022 21:21:51 +0800</pubDate>
        
        <guid>https://zhuaowei.top/article/tcp-%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;h2 id=&#34;1tcp-可靠传输的实现&#34;&gt;1、TCP 可靠传输的实现&lt;/h2&gt;
&lt;p&gt;为了方便描述，假定数据传输只有一个方向。A 发送数据，B 发送确认。&lt;/p&gt;
&lt;h3 id=&#34;11以字节为单位的滑动窗口&#34;&gt;1.1、以字节为单位的滑动窗口&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、发送窗口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如 A 收到了 B 发来的确认报文，报文内容是：&lt;code&gt;ack = 31, rwnd = 20&lt;/code&gt;，这说明：B 已经收到了序号为 30 之前的报文了，期待发送的是序号为 31 的报文，窗口大小是 20，也就是 A 能发送序号为 31 - 50 的报文，这个范围就是 A 的&lt;strong&gt;发送窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;发送窗口里是允许发送且不需要确认的报文，这些报文在&lt;strong&gt;没有收到确认之前都要保留&lt;/strong&gt;，以防超时重发。&lt;/p&gt;
&lt;p&gt;收到确认报文后，确认序号前的报文就都可以释放了，然后 A 的发送窗口就可以向前移动，但是不能超过 B 的窗口值。&lt;/p&gt;
&lt;p&gt;接收方也有一个接收窗口，接收窗口和发送窗口是一样的，接收方只对&lt;strong&gt;按序到达的最后一个报文&lt;/strong&gt;发送确认。&lt;/p&gt;
&lt;p&gt;例如：接收方发送了 &lt;code&gt;ack = 31, rwnd = 20&lt;/code&gt;，此时接收窗口就是 31 - 50，31 之前的已经交付给主机并释放掉了。这是 A 发来了序号为 32， 33，的报文，B 不能发送 &lt;code&gt;ack = 34&lt;/code&gt; 的报文，只能发送 &lt;code&gt;ack = 31&lt;/code&gt; 的报文，因为他们不是按序到达的。如果 A 又发来了序号为 31，37， 38， 40的报文，B 可以发送 &lt;code&gt;ack = 34&lt;/code&gt; 的报文。当 A 收到这个确认报文后就可以将发送窗口向前移动 3 个位置了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ^                               ^                       ^
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |p1 &amp;lt;------- 已发未确认 -------&amp;gt; |p2 &amp;lt;---- 允许但未发 ----&amp;gt;|p3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        |  &amp;lt;--------------------- 发送窗口 -------------------&amp;gt;  |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;A 在发送时，P2指针会一直向前移动，直到与 p3 重合，但不会超过 p3。如果 p2、p3 重合，就必须停止发送，在超时计时器到时间后，就要重新发送未确认的报文，然后重置超时计时器，如此循环，直到收到 B 的确认报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、发送缓存和接收缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送方的应用程序把字节流写入 TCP 的发送缓存，接收方的应用进程从接收缓存中读取字节流。&lt;/p&gt;
&lt;p&gt;关于发送缓存和接收缓存：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它们的空间都是有限的，且是循环使用的。&lt;/li&gt;
&lt;li&gt;实际缓存或这窗口的字节数都是很大的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3、发送缓存&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存放应用程序传送给发送方 TCP 的准备发送的数据：&lt;/li&gt;
&lt;li&gt;存放 TCP 已经发送但是尚未收到确认的数据。1 包含 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发送窗口是发送缓存的一部分。已经确认的数据应当从缓存中删除。应用程序不应当发送过快，否则会没有空间存放数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、接收缓存&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存放收到的数据&lt;/li&gt;
&lt;li&gt;存放未被应用程序读取的数据（按序到达的部分）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果收到的分组被检测到有差错就要丢弃。&lt;/p&gt;
&lt;p&gt;如果应用程序来不及读取到达的数据，那么缓存最终就会被填满，接收窗口就会减小到0；反之，缓存空间就会变大，接收窗口也会变大，但是不会超过缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虽然发送窗口是由接收窗口设置的，但是统一时刻，这两个窗口是可能不一样的，因为网络传输有延迟。&lt;/li&gt;
&lt;li&gt;对于不按序到达的数据，没有明确处理方式，接收方可以完全丢弃，但是浪费资源，一般是临时存储到接收窗口中，然后&lt;strong&gt;按序上交到应用程序&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;TCP 要求接收方必须有累积确认的功能，这样可以减少开销。接收方也可以在合适的时候发送确认，也可以在发送数据时&lt;strong&gt;捎带确认信息&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;确认推迟的时间不得超过 0.5 秒。如果收到一连串最大长度的报文端，必须每隔一段时间发送一个确认。&lt;/li&gt;
&lt;li&gt;捎带确认信息的情况不常见，因为很少有双向发送的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12超时重传时间的选择&#34;&gt;1.2、超时重传时间的选择&lt;/h3&gt;
&lt;p&gt;超时重传时间对网络的影响：时间太短，引起不必要的重传，增大网络开销；时间太长，网络利用率减小，传输效率降低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、超时重传时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报文段的往返时间 RTT&lt;/strong&gt;：发送一个报文，记录它的发送时间，和收到相应确认报文的接收时间。这个时间差就是报文段的往返时间 RTT。&lt;/p&gt;
&lt;p&gt;TCP 保留了一个 RTT 的&lt;strong&gt;加权平均返回时间 RTTs（S表示Smoothed，因为加权使它更平滑）&lt;/strong&gt;，每次测到新的 RTT 样本时，就计算一下新的 RTTs。
$$
新的 RTT_s = (1 - \alpha) \times (旧的 RTT_s) + \alpha \times (新的 RTT 样本)
$$
$0 \le \alpha \lt 1$，当 $\alpha$ 很接近 0，新的 RTTs 和旧的 RTTs 变化不大，（RTT 值更新较慢）；当 $\alpha$ 接近 1，RTTs 受 RTT 的影响较大，（RTT 值更新较快）。官方建议的 $\alpha$ 的值是 $\frac{1}{8}$，也就是 0.125。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时重传时间 RTO（RetransmissionTime-Out）&lt;/strong&gt;:
$$
RTO = RTT_s + 4 \times RTT_D
$$
$RTT_D$ 是 RTT 的偏差的加权平均值，它与 $RTT_s$ 和新的 RTT 样本之差有关。建议使用下面的公式计算：
$$
新的 RTT_D = (1 - \beta) \times (旧的 RTT_D) + \beta \times \lvert RTT_s - 新的 RTT 样本 \rvert
$$
$\beta$ 是一个小于 1 的系数，它是推荐值是 $\frac{1}{4}$，也就是 0.25。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、重传确认时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果确认报文丢失，超时后重传计算的超时重传时间会明显增大。如果从重传后开始计算时间，碰到确认延迟的情况，刚重传就收到了确认报文，超时重传时间就会明显减小，这样又会导致更多的报文重传。&lt;/p&gt;
&lt;p&gt;因此，Karn 提出一个算法：在计算加权平均 RTTs 时，&lt;strong&gt;只要报文段重传了，就不采用其往返时间样本&lt;/strong&gt;。这样计算出的加权平均 RTTs 和 RTO 就比较准确。&lt;/p&gt;
&lt;p&gt;但是，这样又会出现新的问题，当网络延时突然增大，规定时间内收不到确认报文，刚刚发出的报文就需要重新发送，然而这些重发的报文是不计入往返时间样本的，这就导致 RTTs 和 RTO 就无法更新。&lt;/p&gt;
&lt;p&gt;所以要对上面的算法修正：每次重传，就将超时重传时间 RTO 增大为原来的 2 倍。&lt;/p&gt;
&lt;h3 id=&#34;13选择确认-sack&#34;&gt;1.3、选择确认 SACK&lt;/h3&gt;
&lt;p&gt;当接收方收到了报文无差错，只是没有按序号，接收方是不能发送确认报文的，发送方能否只重发按序到达中缺少的那部分报文？答案是可以。&lt;/p&gt;
&lt;p&gt;例如：接收方收到了几段不连续的报文&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|1--------1000|         |1501--------3000|       |3501--------4500|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|             |         |L1              |R1     |L2              |R2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 边界信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;L1 = 1501, R1 = 3001
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;L2 = 3501, R2 = 4501
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果要准确告诉对方这些信息，就要使用&lt;strong&gt;选择确认SACK描述这些信息&lt;/strong&gt;。如果使用这个功能，双方一开始就要约定好使用这个选项，原来的 ACK 功能不变。因为 TCP 的首部选项最多只能有 40 字节，所以 SACK 应该按如下安排：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SACK：1 个字节，指明使用SACK。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选项长度：1 个字节，指明选项的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边界信息：一个字节块有 2 个边界，一个边界需要 4 个字节，所以最多可以有 4 个字节块的边界信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>传输控制协议 TCP 概述</title>
        <link>https://zhuaowei.top/article/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE-tcp-%E6%A6%82%E8%BF%B0/</link>
        <pubDate>Sun, 30 Oct 2022 19:58:30 +0800</pubDate>
        
        <guid>https://zhuaowei.top/article/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE-tcp-%E6%A6%82%E8%BF%B0/</guid>
        <description>&lt;h2 id=&#34;1传输控制协议-tcp-概述&#34;&gt;1、传输控制协议 TCP 概述&lt;/h2&gt;
&lt;h3 id=&#34;11tcp-的主要特点&#34;&gt;1.1、TCP 的主要特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;**TCP 是面向连接的运输层协议。**必须先建立连接，再传送数据，最后断开连接。&lt;/li&gt;
&lt;li&gt;每一条TCP 连接只能有两个端点（endpoint），每一条 TCP 连接只能是&lt;strong&gt;点对点&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;TCP 提供&lt;strong&gt;可靠交付&lt;/strong&gt;的服务。无差错、不丢失、不重复、按序到达。&lt;/li&gt;
&lt;li&gt;TCP 提供&lt;strong&gt;双全工通信&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向字节流&lt;/strong&gt;。TCP中的**“流”（stream）指的是流入和流出进程的字节序列**。TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。TCP 并不知道所传送的字节流的含义。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个 TCP 报文段通常包含上千个字节。TCP 连接是一条虚连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚连接（逻辑连接）&lt;/strong&gt;：并不是一条真正的物理连接，而是要依靠底层的协议实现，所以是虚连接。&lt;/p&gt;
&lt;h3 id=&#34;12tcp-的连接&#34;&gt;1.2、TCP 的连接&lt;/h3&gt;
&lt;p&gt;TCP 把连接作为最基本的抽象。前面提到的端点叫作&lt;strong&gt;套接字（socket）或插口&lt;/strong&gt;，即&lt;strong&gt;端口号拼接到IP地址&lt;/strong&gt;。
$$
套接字 socket = （IP地址：端口号）
$$
&lt;strong&gt;每一条连接唯一地被通信两端的两个端点所确定&lt;/strong&gt;。即：
$$
TCP 连接 ::= {socket1, socket2} = {(IP1:port1), (IP2, port2)}
$$&lt;/p&gt;
&lt;h2 id=&#34;2可靠传输的工作原理&#34;&gt;2、可靠传输的工作原理&lt;/h2&gt;
&lt;h3 id=&#34;21停止等待协议&#34;&gt;2.1、停止等待协议&lt;/h3&gt;
&lt;p&gt;假设有一个端点发送数据，另一个端点接受数据，分别是A和B。A每次发送完一个分组后，就要等待B发来的确认。&lt;/p&gt;
&lt;p&gt;有以下几种情况：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、无差错情况&lt;/strong&gt;：正常进行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、出现差错&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时重传&lt;/strong&gt;：A 只要超过了一段时间仍然没有收到确认，就认为刚才发送的分组丢失了，因而重传刚才发过的分组。&lt;/p&gt;
&lt;p&gt;要设置一个超时计时器，每次发送都要设置计时器，如果在规定时间内收到确认就撤销。&lt;/p&gt;
&lt;p&gt;细节问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A 必须&lt;strong&gt;暂时保留&lt;/strong&gt;没收到确认的分组。&lt;/li&gt;
&lt;li&gt;分组和确认分组都必须进行&lt;strong&gt;编号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;超时计时器的&lt;strong&gt;重传时间&lt;/strong&gt;应当比平均往返时间长一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3、确认丢失和确认迟到&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确认丢失&lt;/strong&gt;：如果B给A发送的确认报文丢失了，A就会重传分组，B这时收到重复分组，&lt;strong&gt;丢掉分组，重新发送确认&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确认迟到&lt;/strong&gt;：如果B发给A的确认报文遇到拥塞，超过了重传计时器的时间，A也会重发分组，B收到重复的分组也是&lt;strong&gt;丢掉分组，重新发送确认&lt;/strong&gt;，A就会收到两份确认，&lt;strong&gt;对于第二份确认，A什么也不会做&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;依靠上面的机制，就可以在不可靠的网络上提供可靠通信。而这种可靠传输协议常称为&lt;strong&gt;自动重传请求ARQ（Automatic Repeat reQuest）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、信道利用率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果像上面说的那样，A发送一个分组，就等待一个确认分组，然后才能发送，那么信道的利用驴就会很低。&lt;/p&gt;
&lt;p&gt;为了提高传输效率，发送方可以不使用停止等待协议，而是采用&lt;strong&gt;流水线传输，发送方可以连续发送多个分组&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;22连续arq协议&#34;&gt;2.2、连续ARQ协议&lt;/h3&gt;
&lt;p&gt;发送方维持一个&lt;strong&gt;发送窗口&lt;/strong&gt;，位于发送窗口内的所有分组都可以发送，不必等待确认。&lt;/p&gt;
&lt;p&gt;发送方每收到一个确认就把发送窗口向前滑动一个分组的位置。&lt;/p&gt;
&lt;p&gt;接收方一般采取累计确认的方式，对于收到的分组，&lt;strong&gt;对按序到达的最后一个分组发送确认&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3tcp-的报文段的首部格式&#34;&gt;3、TCP 的报文段的首部格式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TCP 传送的数据单元是报文段&lt;/strong&gt;。一个TCP报文段分为&lt;strong&gt;首部和数据&lt;/strong&gt;两部分。TCP 的&lt;strong&gt;前 20 字节是固定的&lt;/strong&gt;，后面 4n 字节根据需要增加。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;源端口和目的端口&lt;/strong&gt;：各占 2 字节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;序号（seq）&lt;/strong&gt;：占 4 字节，序号循环使用，溢出模后再开始（mod $2^{32}$）。每一个字节都按序号编号，序号指的是本报文数据开始的序号，如果一段报文序号为301，数据长度为100，下个报文的序号为401。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认号（ack）&lt;/strong&gt;：占 4 字节，&lt;strong&gt;期望收到的下一个报文段的第一个数据字节的序号&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据偏移&lt;/strong&gt;：占 4 位，指出报文数据起始处距离报文起始处的长度，&lt;strong&gt;其实就是头部的长度，单位是 4 字节&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保留&lt;/strong&gt;：6 位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;紧急URG（urgent）&lt;/strong&gt;：1 位，URG = 1时有效，要插到最前面发送，配合紧急指针使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认ACK（acknowledgment）&lt;/strong&gt;：1 位，当 ACK = 1 时，ack 才有效。所以，连接建立后，所有的报文都是 ACK = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推送PSH（push）&lt;/strong&gt;：1 位，设置为 PSH = 1后，发送方立即创建报文发送过去，接收方收到后，立即交付应用进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复位RST（reset）&lt;/strong&gt;：1 位，RST = 1时，说明连接出现了严重差错，必须释放再重新建立连接。也可以用于拒绝连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步SYN（synchronization）&lt;/strong&gt;：1 位，连接建立时用来同步序号。SYN = 1，ACK = 0 表示请求建立连接，对方回复 SYN = 1,ACK = 1 表示同意。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终止FIN（finis）&lt;/strong&gt;：1位，FIN = 1 表示发送方的数据已经发送完毕，要求释放连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口（rwnd，window）&lt;/strong&gt;：占 2 字节。表示发送方的接受窗口，告诉对方，我还有多少空间可以接受数据（字节位单位）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检验和&lt;/strong&gt;：2 字节，检验范围包括首部和数据，计算时，和UDP一样，需要在报文段前面加上12字节的伪首部。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;紧急指针&lt;/strong&gt;：2 字节，只有 URG = 1 时才有意义，指出&lt;strong&gt;紧急数据的字节数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面 20 字节时固定的。&lt;/p&gt;
&lt;ol start=&#34;15&#34;&gt;
&lt;li&gt;选项：长度可变，最长40字节，最后填充只是为了让头部是4字节的整数倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;MSS（Maximum segment Size）&lt;/strong&gt;：每一个 TCP 报文段中&lt;strong&gt;数据字段的最大长度&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
