<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>FTP on zhuaowei的博客</title>
        <link>https://zhuaowei.github.io/tags/ftp/</link>
        <description>Recent content in FTP on zhuaowei的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 29 Oct 2022 21:54:13 +0800</lastBuildDate><atom:link href="https://zhuaowei.github.io/tags/ftp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>文件传输协议 FTP</title>
        <link>https://zhuaowei.github.io/article/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE-ftp/</link>
        <pubDate>Sat, 29 Oct 2022 21:54:13 +0800</pubDate>
        
        <guid>https://zhuaowei.github.io/article/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE-ftp/</guid>
        <description>&lt;h2 id=&#34;1ftp-概述&#34;&gt;1、FTP 概述&lt;/h2&gt;
&lt;p&gt;使用最广泛的文件传输协议。FTP和 TFTP都是文件共享协议中的一大类，即复制整个文件。若要存取一个文件，必须先获取一个本地的文件副本。若要修改文件，只能对文件的副本进行修改，然后再将修改后的文件副本传回到原节点。&lt;/p&gt;
&lt;p&gt;另一大类是联机访问（on-line access）。联机访问意味着允许多个程序同时对一个文件进行存取，它是由操作系统提供对远地共享文件访问的服务，就如同对本地文件的访问一样。这就使用户可以用远地文件作为输入和输出来运行任何应用程序，而操作系统中的文件系统则提供对共享文件的透明存取。&lt;/p&gt;
&lt;p&gt;透明存取的优点是：将来用于处理本地文件的应用程序用来处理远地文件时，不需要对改应用程序作明显的改动。&lt;/p&gt;
&lt;h2 id=&#34;2ftp-的基本工作原理&#34;&gt;2、FTP 的基本工作原理&lt;/h2&gt;
&lt;p&gt;FTP 只提供文件传送的基本服务，&lt;strong&gt;使用 TCP 可靠的运输服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;FTP 的主要功能是减少或消除在不同操作系统下处理文件的不兼容性。&lt;/p&gt;
&lt;p&gt;一个 FTP 服务进程可以为多个客户提供服务。FTP 的服务器进程有两大部分组成：&lt;strong&gt;一个主进程，负责接受新的请求；若干个从属进程，负责处理单个请求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主进程的工作步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开21端口&lt;/li&gt;
&lt;li&gt;等待用户连接&lt;/li&gt;
&lt;li&gt;启动从属进程处理请求。从属进程处理完毕后终止，工作中可能会开启其他子进程。&lt;/li&gt;
&lt;li&gt;回到等待状态，继续接受请求。主从进程处理是并发的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;FTP 的工作情况&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;工作时有两个从属进程：&lt;strong&gt;控制进程&lt;/strong&gt;和&lt;strong&gt;数据传送进程&lt;/strong&gt;。这两个是&lt;strong&gt;并行的 TCP 连接&lt;/strong&gt;：&lt;strong&gt;控制连接&lt;/strong&gt;和&lt;strong&gt;数据连接&lt;/strong&gt;。请求和控制信息通过控制连接；数据传送通过数据连接。&lt;/p&gt;
&lt;h2 id=&#34;3简单文件传送协议-tftp&#34;&gt;3、简单文件传送协议 TFTP&lt;/h2&gt;
&lt;p&gt;TFTP（Trivial File Transfer Protocol），&lt;strong&gt;使用UDP协议&lt;/strong&gt;实现的很小的易于实现的文件传送协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可用于UDP环境&lt;/li&gt;
&lt;li&gt;代码所占内存小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;主要特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次传送的数据报文中有512字节数据，最后一次可以不足512.&lt;/li&gt;
&lt;li&gt;报文按序号编号，从1开始&lt;/li&gt;
&lt;li&gt;支持ASCII码或者二进制传送&lt;/li&gt;
&lt;li&gt;可对文件进行读写。&lt;/li&gt;
&lt;li&gt;首部简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;工作步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;客户端向服务端（端口69）发送一个读或者写的请求报文，服务端另开一个端口给客户端通信。如果最后一个报文的数据部分正好是512字节，则还需要发送一个无数据部分的报文，作为结束标志；如果不足512字节，就不用发送了，因为不足512已经是结束标志了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;差错改正措施&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;服务端每次发完一个文件块之后，都会等待一个确认的报文，报文指明所确认的编号。如果在规定时间内收不到确认报文，就会重发数据PDU；如果客户端在发完确认报文后，在规定时间内没有收到下一个文件块，也要重新发送确认报文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发送方：收不到确认报文，重发文件块&lt;/p&gt;
&lt;p&gt;接收方：收不到下一个文件块，重发确认报文&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
